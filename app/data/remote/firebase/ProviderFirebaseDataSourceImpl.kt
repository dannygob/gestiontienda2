package com.example.mystoreapp.data.remote.firebase

import com.example.mystoreapp.data.remote.firebase.ProviderFirebaseDataSource
import com.google.firebase.firestore.FirebaseFirestore
import javax.inject.Inject

class ProviderFirebaseDataSourceImpl @Inject constructor(
    private val firestore: FirebaseFirestore
) : ProviderFirebaseDataSource {

    private val providersCollection = firestore.collection("providers")

    override suspend fun getProviders(): List<ProviderFirebase> {
        return try {
            val snapshot = providersCollection.get().await()
            snapshot.documents.mapNotNull { it.toObject(ProviderFirebase::class.java) }
        } catch (e: Exception) {
            // Handle exceptions (e.g., log error, throw custom exception)
            emptyList()
        }
    }

    override suspend fun getProviderById(providerId: String): ProviderFirebase? {
        return try {
            val document = providersCollection.document(providerId).get().await()
            document.toObject(ProviderFirebase::class.java)
        } catch (e: Exception) {
            // Handle exceptions
            null
        }
    }

    override suspend fun addProvider(provider: ProviderFirebase) {
        try {
            // If provider.id is empty or needs to be generated by Firestore
            if (provider.id.isEmpty()) {
                providersCollection.add(provider).await()
            } else {
                providersCollection.document(provider.id).set(provider).await()
            }
        } catch (e: Exception) {
            // Handle exceptions
        }
    }

    override suspend fun updateProvider(provider: ProviderFirebase) {
        try {
            providersCollection.document(provider.id).set(provider).await()
        } catch (e: Exception) {
            // Handle exceptions
        }
    }

    override suspend fun deleteProvider(providerId: String) {
        try {
            providersCollection.document(providerId).delete().await()
        } catch (e: Exception) {
            // Handle exceptions
        }
    }
}

// Add necessary imports for coroutines if not already present
import kotlinx.coroutines.tasks.await