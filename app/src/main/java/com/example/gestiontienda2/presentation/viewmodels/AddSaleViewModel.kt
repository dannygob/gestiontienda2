package com.gestiontienda2.presentation.viewmodels // Adjust package name as needed

import androidx.compose.runtime.MutableState
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.gestiontienda2.domain.models.SaleItem
import com.gestiontienda2.domain.repository.ProductRepository
import com.gestiontienda2.domain.repository.SaleRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.receiveAsFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

// Define a simple SavingState sealed class for now
sealed class SavingState {
    object Idle : SavingState()
    object Saving : SavingState()
    object Success : SavingState()
    data class Error(val message: String) : SavingState()
}

sealed class UiEvent {
    data class ShowSnackbar(val message: String) : UiEvent()
}

@HiltViewModel
class AddSaleViewModel @Inject constructor(
    private val saleRepository: SaleRepository, // Inject SaleRepository
    private val productRepository: ProductRepository // Inject ProductRepository
) : ViewModel() {

    // Mutable states for the new sale data
    var newSaleDate: MutableState<Long> = mutableStateOf(System.currentTimeMillis()) // Timestamp
    var newSaleClientId: MutableState<Int?> = mutableStateOf(null) // Placeholder for client ID
    var newSaleItems: MutableState<List<SaleItem>> = mutableStateOf(emptyList())

    // State for saving process
    private val _savingState = MutableStateFlow<SavingState>(SavingState.Idle)
    val savingState: StateFlow<SavingState> = _savingState.asStateFlow()

    private val _eventChannel = Channel<UiEvent>(Channel.BUFFERED)
    val events = _eventChannel.receiveAsFlow()

    // Functions to update the new sale data
    fun updateSaleDate(timestamp: Long) {
        newSaleDate.value = timestamp
    }

    fun updateClientId(clientId: Int) {
        newSaleClientId.value = clientId
    }

    fun addItemToSale(item: SaleItem) {
        newSaleItems.value = newSaleItems.value + item
    }

    fun updateSaleItemQuantity(itemId: Int, quantity: Int) {
        newSaleItems.value = newSaleItems.value.map {
            if (it.id == itemId) it.copy(quantity = quantity) else it
        }
    }

    fun removeSaleItem(itemId: Int) {
        newSaleItems.value = newSaleItems.value.filter { it.id != itemId }
    }

    // Function to save the new sale
    fun saveSale() {
        _savingState.value = SavingState.Saving
        viewModelScope.launch {
            // Validate stock before saving
            for (item in newSaleItems.value) {
                val product = productRepository.getProductById(item.productId)
                if (product == null || (product.stockQuantity - product.reservedStockQuantity) < item.quantity) {
                    viewModelScope.launch {
                        _eventChannel.send(UiEvent.ShowSnackbar("Insufficient stock for product: ${product?.name ?: item.productId}"))
                    }
                    return@launch // Stop the saving process
                }
            }

            // If all items have sufficient stock, proceed with saving

            // Update product stock quantities
            try {
                for (item in newSaleItems.value) {
                    val product = productRepository.getProductById(item.productId)
                    val newStock = (product?.stockQuantity ?: 0) - item.quantity
                    // Assuming productRepository has updateProductStockQuantity method
                    productRepository.updateProductStockQuantity(item.productId, newStock)
                }
            } catch (e: Exception) {
                viewModelScope.launch {
                    _eventChannel.send(UiEvent.ShowSnackbar("Failed to update product stock: ${e.localizedMessage ?: "Unknown error"}"))
                }
                return@launch // Stop the saving process
            }

            try {
                // Create the Sale object from the current state
                val newSale = Sale(
                    id = 0, // ID will be generated by the database
                    clientId = newSaleClientId.value ?: -1, // Handle null client ID
                    saleDate = newSaleDate.value,
                    items = newSaleItems.value,
                    totalAmount = newSaleItems.value.sumOf { it.quantity * it.priceAtSale } // Calculate total
                )
                saleRepository.insertSale(newSale) // Call the repository to insert
                _savingState.value = SavingState.Success
            } catch (e: Exception) {
                _savingState.value = SavingState.Error(e.localizedMessage ?: "Unknown error")
            }
        }
    }
}