package com.example.gestiontienda2.presentation.ui.addproduct

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.gestiontienda2.domain.models.Product
import com.example.gestiontienda2.domain.usecases.AddProductUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class AddProductViewModel @Inject constructor(
    private val addProductUseCase: AddProductUseCase
) : ViewModel() {

    private val _name = MutableStateFlow("")
    val productname: StateFlow<String> = _name.asStateFlow()

    private val _barcode = MutableStateFlow("")
    val productBarcode: StateFlow<String> = _barcode.asStateFlow()

    private val _purchasePrice = MutableStateFlow("")
    val productPurchasePrice: StateFlow<String> = _purchasePrice.asStateFlow()

    private val _salePrice = MutableStateFlow("")
    val productSalePrice: StateFlow<String> = _salePrice.asStateFlow()

    private val _category = MutableStateFlow("")
    val productCategory: StateFlow<String> = _category.asStateFlow()

    private val _stock = MutableStateFlow("0")
    val productStock: StateFlow<String> = _stock.asStateFlow()

    private val _providerId = MutableStateFlow("")
    val productProviderId: StateFlow<String> = _providerId.asStateFlow()

    private val _savingState = MutableStateFlow<SavingState>(SavingState.Idle)
    val savingState: StateFlow<SavingState> = _savingState.asStateFlow()

    fun onNameChange(newName: String) {
        _name.value = newName
    }

    fun onBarcodeChange(newBarcode: String) {
        _barcode.value = newBarcode
    }

    fun onPurchasePriceChange(newPrice: String) {
        _purchasePrice.value = newPrice
    }

    fun onSalePriceChange(newPrice: String) {
        _salePrice.value = newPrice
    }

    fun onCategoryChange(newCategory: String) {
        _category.value = newCategory
    }

    fun onStockChange(newStock: String) {
        _stock.value = newStock
    }

    fun onProviderIdChange(newProviderId: String) {
        _providerId.value = newProviderId
    }

    fun saveProduct() {
        if (_savingState.value is SavingState.Saving) {
            return // Prevent multiple save attempts
        }

        _savingState.value = SavingState.Saving

        viewModelScope.launch {
            try {
                val newProduct = Product(
                    id = 0, // ID will be generated by the repository/database
                    name = _name.value,
                    barcode = _barcode.value,
                    purchasePrice = _purchasePrice.value.toDoubleOrNull() ?: 0.0,
                    salePrice = _salePrice.value.toDoubleOrNull() ?: 0.0,
                    category = _category.value,
                    stock = _stock.value.toIntOrNull() ?: 0,
                    providerId = _providerId.value.toIntOrNull() ?: 0,
                    imageUrl = null // Assuming image handling is not implemented yet
                )

                addProductUseCase(newProduct)
                _savingState.value = SavingState.Success
            } catch (e: Exception) {
                _savingState.value = SavingState.Error("Failed to save product: ${e.message}")
            }
        }
    }
}

sealed class SavingState {
    object Idle : SavingState()
    object Saving : SavingState()
    object Success : SavingState()
    data class Error(val message: String) : SavingState()
}
