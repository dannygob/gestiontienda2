package com.inventory.app.presentation.ui.addclient

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.gestiontienda2.domain.models.Client
import com.example.gestiontienda2.domain.usecases.AddClientUseCase
import com.example.gestiontienda2.presentation.ui.common.SaveState
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

data class AddClientUiState(
    val name: String = "",
    val phone: String = "",
    val email: String = "",
    val address: String = "",
    val nameError: String? = null,
    val phoneError: String? = null,
    val emailError: String? = null,
    val saveState: SaveState = SaveState.Idle,
) {
    val isFormValid: Boolean
        get() = name.isNotBlank() && nameError == null && phoneError == null && emailError == null
}

@HiltViewModel
class AddClientViewModel @Inject constructor(
    private val addClientUseCase: AddClientUseCase
) : ViewModel() {

    private val _uiState = MutableStateFlow(AddClientUiState())
    val uiState: StateFlow<AddClientUiState> = _uiState.asStateFlow()

    fun onNameChange(newName: String) {
        _uiState.update { currentState ->
            currentState.copy(
                name = newName,
                nameError = validateName(newName)
            )
        }
    }

    fun onPhoneChange(newPhone: String) {
        _uiState.update { currentState ->
            currentState.copy(
                phone = newPhone,
                phoneError = validatePhone(newPhone)
            )
        }
    }

    fun onEmailChange(newEmail: String) {
        _uiState.update { currentState ->
            currentState.copy(
                email = newEmail,
                emailError = validateEmail(newEmail)
            )
        }
    }

    fun onAddressChange(newAddress: String) {
        _uiState.update { currentState ->
            currentState.copy(address = newAddress)
        }
    }

    fun saveClient() {
        val currentState = _uiState.value
        if (!currentState.isFormValid) return

        viewModelScope.launch {
            _uiState.update { it.copy(saveState = SaveState.Saving) }

            try {
                val client = Client(
                    id = 0, // Will be generated by repository
                    name = currentState.name.trim(),
                    phone = currentState.phone.trim().takeIf { it.isNotBlank() }.toString(),
                    email = currentState.email.trim().takeIf { it.isNotBlank() },
                    address = currentState.address.trim().takeIf { it.isNotBlank() }.toString(),
                    paymentPreference = "Cash" // Default value, can be changed later

                )

                addClientUseCase(client)
                _uiState.update { it.copy(saveState = SaveState.Success) }

            } catch (e: Exception) {
                _uiState.update {
                    it.copy(saveState = SaveState.Error(e.localizedMessage ?: "Error desconocido"))
                }
            }
        }
    }

    private fun validateName(name: String): String? {
        return when {
            name.isBlank() -> "El nombre es requerido"
            name.length < 2 -> "El nombre debe tener al menos 2 caracteres"
            else -> null
        }
    }

    private fun validatePhone(phone: String): String? {
        if (phone.isBlank()) return null
        return if (phone.length >= 8) null else "Teléfono debe tener al menos 8 dígitos"
    }

    private fun validateEmail(email: String): String? {
        if (email.isBlank()) return null
        return if (android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
            null
        } else {
            "Email inválido"
        }
    }
}