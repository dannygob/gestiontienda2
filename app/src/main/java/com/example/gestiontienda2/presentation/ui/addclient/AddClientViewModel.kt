package com.example.gestiontienda2.presentation.ui.addclient

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.gestiontienda2.domain.models.Client
import com.example.gestiontienda2.domain.usecases.AddClientUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class AddClientViewModel @Inject constructor(
    private val addClientUseCase: AddClientUseCase
) : ViewModel() {

    val errorMessage: Any = TODO()
    private val _name = MutableStateFlow("")
    val name: StateFlow<String> = _name.asStateFlow()

    private val _phone = MutableStateFlow("")
    val phone: StateFlow<String> = _phone.asStateFlow()

    private val _email = MutableStateFlow("")
    val email: StateFlow<String> = _email.asStateFlow()

    private val _address = MutableStateFlow("")
    val address: StateFlow<String> = _address.asStateFlow()

    private val _savingState = MutableStateFlow<SavingState>(SavingState.Idle)
    val savingState: StateFlow<SavingState> = _savingState.asStateFlow()


    fun onNameChange(newName: String) {
        _name.value = newName
    }

    fun onPhoneChange(newPhone: String) {
        _phone.value = newPhone
    }

    fun onEmailChange(newEmail: String) {
        _email.value = newEmail
    }

    fun onAddressChange(newAddress: String) {
        _address.value = newAddress
    }

    fun saveClient() {
        viewModelScope.launch {
            _savingState.value = SavingState.Saving
            val client = Client(
                id = 0, // ID will be generated by the repository/data source
                name = _name.value,
                phone = _phone.value,
                email = _email.value,
                address = _address.value,
                paymentPreference = "Cash" // Default value, can be changed later
            )
            try {
                addClientUseCase(client)
                _savingState.value = SavingState.Success
            } catch (e: Exception) {
                _savingState.value = SavingState.Error(e.localizedMessage ?: "Unknown error")
            }
        }
    }
}

sealed class SavingState {
    object Idle : SavingState()
    object Saving : SavingState()
    object Success : SavingState()
    data class Error(val message: String) : SavingState()
}