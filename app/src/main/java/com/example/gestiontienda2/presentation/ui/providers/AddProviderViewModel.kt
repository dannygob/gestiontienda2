package com.gestiontienda2.presentation.ui.providers

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.gestiontienda2.domain.models.Provider
import com.example.gestiontienda2.domain.usecases.AddProviderUseCase
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class AddProviderViewModel @Inject constructor(
    private val addProviderUseCase: AddProviderUseCase
) : ViewModel() {

    private val _name = MutableStateFlow("")
    val name: StateFlow<String> = _name.asStateFlow()

    private val _phone = MutableStateFlow("")
    val phone: StateFlow<String> = _phone.asStateFlow()

    private val _email = MutableStateFlow("")
    val email: StateFlow<String> = _email.asStateFlow()

    private val _address = MutableStateFlow("")
    val address: StateFlow<String> = _address.asStateFlow()

    private val _savingState = MutableStateFlow<SavingState>(SavingState.Idle)
    val savingState: StateFlow<SavingState> = _savingState.asStateFlow()

    sealed class SavingState {
        object Idle : SavingState()
        object Saving : SavingState()
        object Success : SavingState()
        data class Error(val message: String) : SavingState()
    }

    fun updateName(newName: String) {
        _name.value = newName
    }

    fun updatePhone(newPhone: String) {
        _phone.value = newPhone
    }

    fun updateEmail(newEmail: String) {
        _email.value = newEmail
    }

    fun updateAddress(newAddress: String) {
        _address.value = newAddress
    }

    fun saveProvider() {
        viewModelScope.launch {
            _savingState.value = SavingState.Saving
            try {
                val newProvider = Provider(
                    id = 0, // ID will be generated by Room
                    name = _name.value,
                    phone = _phone.value,
                    email = _email.value,
                    address = _address.value
                )
                addProviderUseCase(newProvider)
                _savingState.value = SavingState.Success
            } catch (e: Exception) {
                _savingState.value = SavingState.Error("Failed to save provider: ${e.message}")
            }
        }
    }
}