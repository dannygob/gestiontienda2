package com.example.gestiontienda2.presentation.ui.sales

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.gestiontienda2.domain.models.Product.SaleItem
import com.example.gestiontienda2.presentation.viewmodels.SavingState
import com.google.android.gms.analytics.ecommerce.Product
import com.google.android.gms.common.api.Api.Client
import com.google.rpc.context.AttributeContext.Resource
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class AddSaleViewModel @Inject constructor(
    private val addSaleUseCase: AddSaleUseCase,
    private val getClientsUseCase: GetClientsUseCase,
    private val getProductsUseCase: GetProductsUseCase,
) : ViewModel() {

    private val _saleDate = MutableStateFlow(System.currentTimeMillis())
    val saleDate: StateFlow<Long> = _saleDate.asStateFlow()

    private val _selectedClient = MutableStateFlow<Client?>(null)
    val selectedClient: StateFlow<Client?> = _selectedClient.asStateFlow()

    private val _saleItems = MutableStateFlow<List<SaleItem>>(emptyList())
    val saleItems: StateFlow<List<SaleItem>> = _saleItems.asStateFlow()

    private val _totalAmount = MutableStateFlow(0.0)
    val totalAmount: StateFlow<Double> = _totalAmount.asStateFlow()

    private val _savingState = MutableStateFlow<SavingState>(SavingState.Idle)
    val savingState: StateFlow<SavingState> = _savingState.asStateFlow()

    // Available clients and products for selection
    private val _clients = MutableStateFlow<List<Client>>(emptyList())
    val clients: StateFlow<List<Client>> = _clients.asStateFlow()

    private val _products = MutableStateFlow<List<Product>>(emptyList())
    val products: StateFlow<List<Product>> = _products.asStateFlow()

    init {
        loadClients()
        loadProducts()
    }

    private fun loadClients() {
        viewModelScope.launch {
            getClientsUseCase().collect { resource ->
                when (resource) {
                    is Resource.Success -> {
                        _clients.value = resource.data ?: emptyList()
                    }
                    is Resource.Error -> {
                        // Handle error loading clients
                    }
                    is Resource.Loading -> {
                        // Handle loading state for clients
                    }
                }
            }
        }
    }

    private fun loadProducts() {
        viewModelScope.launch {
            getProductsUseCase().collect { resource ->
                when (resource) {
                    is Resource.Success -> {
                        _products.value = resource.data ?: emptyList()
                    }
                    is Resource.Error -> {
                        // Handle error loading products
                    }
                    is Resource.Loading -> {
                        // Handle loading state for products
                    }
                }
            }
        }
    }

    fun setSaleDate(timestamp: Long) {
        _saleDate.value = timestamp
    }

    fun selectClient(client: Client) {
        _selectedClient.value = client
    }

    fun addProductToSale(product: Product) {
        val currentItems = _saleItems.value.toMutableList()
        val existingItem = currentItems.find { it.productId == product.id }

        if (existingItem != null) {
            // If product already exists, increase quantity
            val updatedItem = existingItem.copy(quantity = existingItem.quantity + 1)
            _saleItems.value = currentItems.map {
                if (it.productId == product.id) updatedItem else it
            }
        } else {
            // If product is new, add with quantity 1
            val newItem = SaleItem(
                id = 0, // Will be generated by Room/Firebase
                saleId = 0, // Will be set when saving the sale
                productId = product.id,
                quantity = 1,
                priceAtSale = product.salePrice,
                product = product
            )
            _saleItems.value = currentItems + newItem
        }
        calculateTotal()
    }

    fun updateProductQuantity(productId: Int, quantity: Int) {
        if (quantity <= 0) {
            removeProductFromSale(productId)
            return
        }

        val currentItems = _saleItems.value.toMutableList()
        val index = currentItems.indexOfFirst { it.productId == productId }

        if (index != -1) {
            val updatedItem = currentItems[index].copy(quantity = quantity)
            currentItems[index] = updatedItem
            _saleItems.value = currentItems
            calculateTotal()
        }
    }

    fun removeProductFromSale(productId: Int) {
        _saleItems.value = _saleItems.value.filter { it.productId != productId } as List<SaleItem>
        calculateTotal()
    }

    private fun calculateTotal() {
        _totalAmount.value = _saleItems.value.sumOf { it.quantity * it.priceAtSale }
    }

    fun saveSale() {
        viewModelScope.launch {
            _savingState.value = SavingState.Saving

            val client = _selectedClient.value
            val items = _saleItems.value

            if (client == null) {
                _savingState.value = SavingState.Error("Please select a client.")
                return@launch
            }
            if (items.isEmpty()) {
                _savingState.value = SavingState.Error("Please add products to the sale.")
                return@launch
            }

            val newSale = Sale(
                id = 0, // Will be generated by repository
                clientId = client.id,
                saleDate = _saleDate.value,
                totalAmount = _totalAmount.value,
                items = items.map { saleItem ->
                    SaleItem(
                        id = 0, // Will be generated by repository
                        saleId = 0, // Will be set by repository
                        productId = saleItem.productId,
                        quantity = saleItem.quantity,
                        priceAtSale = saleItem.priceAtSale,
                        product = null // Don't save product details in the domain layer
                    )
                }
            )

            when (val result = addSaleUseCase(newSale)) {
                is Resource.Success -> {
                    _savingState.value = SavingState.Success
                    // Clear form
                    clearForm()
                }
                is Resource.Error -> {
                    _savingState.value = SavingState.Error(
                        result.message ?: "Unknown error saving sale"
                    )
                }
                is Resource.Loading -> {
                    // Saving state is already set to Saving
                }
            }
        }
    }

    private fun clearForm() {
        _selectedClient.value = null
        _saleItems.value = emptyList()
        _totalAmount.value = 0.0
        _saleDate.value = System.currentTimeMillis()
    }

    fun resetSavingState() {
        _savingState.value = SavingState.Idle
    }
}