package com.example.gestiontienda2.presentation.ui.sales

// Corrected imports:
// Removed incorrect Resource import: import com.google.rpc.context.AttributeContext.Resource
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.gestiontienda2.domain.models.Client
import com.example.gestiontienda2.domain.models.Product
import com.example.gestiontienda2.domain.models.SaleItem
import com.example.gestiontienda2.domain.usecases.AddSaleUseCase
import com.example.gestiontienda2.domain.usecases.GetClientsUseCase
import com.example.gestiontienda2.domain.usecases.GetProductsUseCase
import com.example.gestiontienda2.presentation.viewmodels.SavingState
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class AddSaleViewModel @Inject constructor(
    private val addSaleUseCase: AddSaleUseCase,
    private val getClientsUseCase: GetClientsUseCase,
    private val getProductsUseCase: GetProductsUseCase,
) : ViewModel() {

    private val _saleDate = MutableStateFlow(System.currentTimeMillis())
    val saleDate: StateFlow<Long> = _saleDate.asStateFlow()

    private val _selectedClient = MutableStateFlow<Client?>(null)
    val selectedClient: StateFlow<Client?> = _selectedClient.asStateFlow()

    private val _saleItems = MutableStateFlow<List<SaleItem>>(emptyList())
    val saleItems: StateFlow<List<SaleItem>> = _saleItems.asStateFlow()

    private val _totalAmount = MutableStateFlow(0.0)
    val totalAmount: StateFlow<Double> = _totalAmount.asStateFlow()

    private val _savingState = MutableStateFlow<SavingState>(SavingState.Idle)
    val savingState: StateFlow<SavingState> = _savingState.asStateFlow()

    // Available clients and products for selection
    private val _clients = MutableStateFlow<List<Client>>(emptyList())
    val clients: StateFlow<List<Client>> = _clients.asStateFlow()

    private val _products = MutableStateFlow<List<Product>>(emptyList())
    val products: StateFlow<List<Product>> = _products.asStateFlow()

    init {
        loadClients()
        loadProducts()
    }

    private fun loadClients() {
        viewModelScope.launch {
            try {
                getClientsUseCase().collect { clientList ->
                    _clients.value = clientList
                }
            } catch (e: Exception) {
                // Handle error loading clients, e.g., update an error StateFlow
                _savingState.value = SavingState.Error("Error loading clients: ${e.message}")
            }
        }
    }

    private fun loadProducts() {
        viewModelScope.launch {
            try {
                getProductsUseCase().collect { productList ->
                    _products.value = productList
                }
            } catch (e: Exception) {
                // Handle error loading products, e.g., update an error StateFlow
                _savingState.value = SavingState.Error("Error loading products: ${e.message}")
            }
        }
    }

    fun setSaleDate(timestamp: Long) {
        _saleDate.value = timestamp
    }

    fun selectClient(client: Client) {
        _selectedClient.value = client
    }

    fun addProductToSale(product: Product) {
        val currentItems = _saleItems.value.toMutableList()
        val existingItem = currentItems.find { it.productId == product.id }

        if (existingItem != null) {
            // If product already exists, increase quantity
            val updatedItem = existingItem.copy(quantity = existingItem.quantity + 1)
            _saleItems.value = currentItems.map {
                if (it.productId == product.id) updatedItem else it
            }
        } else {
            // If product is new, add with quantity 1
            val newItem = SaleItem(
                id = 0, // Will be generated by Room/Firebase
                saleId = 0, // Will be set when saving the sale
                productId = product.id,
                quantity = 1,
                priceAtSale = product.salePrice,
                product = product
            )
            _saleItems.value = currentItems + newItem
        }
        calculateTotal()
    }

    fun updateProductQuantity(productId: Int, quantity: Int) {
        if (quantity <= 0) {
            removeProductFromSale(productId)
            return
        }

        val currentItems = _saleItems.value.toMutableList()
        val index = currentItems.indexOfFirst { it.productId == productId }

        if (index != -1) {
            val updatedItem = currentItems[index].copy(quantity = quantity)
            currentItems[index] = updatedItem
            _saleItems.value = currentItems
            calculateTotal()
        }
    }

    fun removeProductFromSale(productId: Int) {
        _saleItems.value = _saleItems.value.filter { it.productId != productId } as List<SaleItem>
        calculateTotal()
    }

    private fun calculateTotal() {
        _totalAmount.value = _saleItems.value.sumOf { it.quantity * it.priceAtSale }
    }

    fun saveSale() {
        viewModelScope.launch {
            _savingState.value = SavingState.Saving

            val client = _selectedClient.value
            val items = _saleItems.value

            if (client == null) {
                _savingState.value = SavingState.Error("Please select a client.")
                return@launch
            }
            if (items.isEmpty()) {
                _savingState.value = SavingState.Error("Please add products to the sale.")
                return@launch
            }

            try {
                val resultId = addSaleUseCase(newSale)
                if (resultId > 0) { // Assuming a positive ID means success
                    _savingState.value = SavingState.Success
                    clearForm()
                } else {
                    _savingState.value = SavingState.Error("Failed to save sale.")
                }
            } catch (e: Exception) {
                _savingState.value = SavingState.Error(e.message ?: "Unknown error saving sale")
            }
        }
    }

    private fun clearForm() {
        _selectedClient.value = null
        _saleItems.value = emptyList()
        _totalAmount.value = 0.0
        _saleDate.value = System.currentTimeMillis()
    }

    fun resetSavingState() {
        _savingState.value = SavingState.Idle
    }
}